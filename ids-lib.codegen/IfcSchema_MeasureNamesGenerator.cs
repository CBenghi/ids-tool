using System.Text;
using Xbim.Common.Metadata;

namespace IdsLib.codegen;

public class IfcSchema_MeasureNamesGenerator
{
    internal static string Execute()
    {
        var measureNames = GetAllMeasureNames();

        var measureInfos = new Dictionary<string, List<string>>();
        var attNames = new Dictionary<string, List<string>>();
        foreach (var schema in Program.schemas)
        {
            System.Reflection.Module module = SchemaHelper.GetModule(schema);
            var metaD = ExpressMetaData.GetMetadata(module);
            foreach (var daMeasure in measureNames)
            {
                // measure class names
                try
                {
                    var t = metaD.ExpressType(daMeasure.ToUpperInvariant());
                    if (t is null)
                        continue;
                    if (measureInfos.TryGetValue(daMeasure, out var lst))
                    {
                        lst.Add(schema);
                    }
                    else
                    {
                        measureInfos.Add(daMeasure, new List<string>() { schema });
                    }
                }
                catch 
                {
                    continue;
                }                
            }
        }
        var source = stub;
        var sbMeasures = new StringBuilder();
        int i = 0;
        foreach (var clNm in measureInfos.Keys.OrderBy(x => x))
        {
            var schemes = measureInfos[clNm];
            sbMeasures.AppendLine($"""               yield return new IfcMeasureInformation("{clNm}", {CodeHelpers.NewStringArray(schemes)}); // {++i}""");
        }
        i = 0;
        source = source.Replace($"<PlaceHolderMeasures>\r\n", sbMeasures.ToString());
        source = source.Replace($"<PlaceHolderVersion>", VersionHelper.GetFileVersion(typeof(ExpressMetaData)));
        return source;
    }

    private static IEnumerable<string> GetAllMeasureNames()
    {
        return GetDocumentationMeasureNames().
            Concat(GetExtraMeasureNames());
    }

    private static IEnumerable<string> GetExtraMeasureNames()
    {
        yield return "IfcText";
        yield return "IfcLabel";
        yield return "IfcThermalTransmittanceMeasure";
    }

    private static IEnumerable<string> GetDocumentationMeasureNames()
    {
        var markDown = File.ReadAllLines(@"buildingSMART\units.md");
        foreach (var line in markDown)
        {
            var modline = line.Trim(' ');
            var lineCells = modline.Split('|');
            if (lineCells.Length != 8)
                continue;
            var first = lineCells[1].Trim();
            if (first.Contains(' ') ||  first.Contains('\t') || first.Contains('-'))
                continue;
            yield return first;
        }
    }

    private const string stub = @"// <auto-generated/>
// This code was automatically generated with information from Xbim.Essentials <PlaceHolderVersion>.
// Any changes made to this file will be lost.

using System;
using System.Collections.Generic;

namespace IdsLib.IfcSchema
{
    public partial class SchemaInfo
    {
        /// <summary>
        /// The names of classes across all schemas.
        /// </summary>
        public static IEnumerable<IfcMeasureInformation> AllMeasures
        {
            get
            {
<PlaceHolderMeasures>
            }
        }
    }
}

";

}
